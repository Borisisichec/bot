
import random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥–∞–¥–∫–∏ —Å —É—Ä–æ–≤–Ω—è–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
riddles = {
    "easy": [
        {"question": "–ß—Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏?", "options": ["–°–æ–Ω", "–¢–µ–Ω—å", "–ú–µ—á—Ç—É"], "answer": "–°–æ–Ω"},
        {"question": "–ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º. –ß—Ç–æ —ç—Ç–æ?", "options": ["–Å–ª–∫–∞", "–¢—Ä–∞–≤–∞", "–õ–∏—Å—Ç"], "answer": "–Å–ª–∫–∞"}
    ],
    "medium": [
        {"question": "–ß—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ, –µ—Å–ª–∏ –∏–∑ –Ω–µ–≥–æ –±—Ä–∞—Ç—å?", "options": ["–Ø–º–∞", "–î—ã—Ä–∞", "–ö—É–±"], "answer": "–Ø–º–∞"},
        {"question": "–°—Ç–æ –æ–¥–µ–∂–µ–∫ –∏ –≤—Å–µ –±–µ–∑ –∑–∞—Å—Ç–µ–∂–µ–∫. –ß—Ç–æ —ç—Ç–æ?", "options": ["–ö–∞–ø—É—Å—Ç–∞", "–õ—É–∫", "–ö—É–∫—É—Ä—É–∑–∞"],
         "answer": "–ö–∞–ø—É—Å—Ç–∞"}
    ],
    "hard": [
        {"question": "–õ–µ—Ç–∏—Ç ‚Äî –º–æ–ª—á–∏—Ç, –ª–µ–∂–∏—Ç ‚Äî –º–æ–ª—á–∏—Ç, –∫–æ–≥–¥–∞ —É–º—Ä—ë—Ç ‚Äî –∫—Ä–∏—á–∏—Ç. –ß—Ç–æ —ç—Ç–æ?",
         "options": ["–°—Ç—Ä–µ–ª–∞", "–°–Ω–µ–≥", "–õ–∏—Å—Ç"], "answer": "–°–Ω–µ–≥"},
        {"question": "–£ –∫–∞–∫–æ–≥–æ –º–µ—Å—è—Ü–∞ 28 –¥–Ω–µ–π?", "options": ["–§–µ–≤—Ä–∞–ª—å", "–í—Å–µ", "–Ø–Ω–≤–∞—Ä—å"], "answer": "–í—Å–µ"}
    ]
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π
user_scores = {}
user_positions = {}


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üß© –ó–∞–≥–∞–¥–∫–∞")],
            [KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥"), KeyboardButton("üìä –ú–æ–π —Å—á—ë—Ç")]
        ],
        resize_keyboard=True
    )


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_scores[user_id] = {"correct": 0, "wrong": 0}
    user_positions[user_id] = None
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=main_menu())


# –ù–æ–≤–∞—è –∑–∞–≥–∞–¥–∫–∞
async def send_riddle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    riddle = random.choice(riddles["easy"])
    context.user_data['answer'] = riddle['answer']

    reply_markup = ReplyKeyboardMarkup(
        [[option] for option in riddle['options']], one_time_keyboard=True, resize_keyboard=True
    )

    await update.message.reply_text(f"{riddle['question']}", reply_markup=reply_markup)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_answer = update.message.text
    correct_answer = context.user_data.get('answer')

    if user_answer == correct_answer:
        user_scores[user_id]["correct"] += 1
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç", reply_markup=main_menu())
    else:
        user_scores[user_id]["wrong"] += 1
        await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}.", reply_markup=main_menu())

    await check_ranking_changes(context)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
async def check_ranking_changes(context: ContextTypes.DEFAULT_TYPE):
    sorted_scores = sorted(user_scores.items(), key=lambda x: x[1]["correct"], reverse=True)
    current_positions = {user_id: position for position, (user_id, _) in enumerate(sorted_scores, start=1)}

    for user_id, new_position in current_positions.items():
        previous_position = user_positions.get(user_id)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ
        if new_position == 1 and previous_position != 1:
            await context.bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–¥–Ω—è–ª—Å—è –Ω–∞ 1 –º–µ—Å—Ç–æ!")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä–µ –ø–æ–∑–∏—Ü–∏–∏
        if previous_position and new_position > previous_position:
            await context.bot.send_message(user_id, "‚ö†Ô∏è –ö—Ç–æ-—Ç–æ –æ–±–æ–≥–Ω–∞–ª —Ç–µ–±—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –î–æ–≥–æ–Ω—è–π!")

        user_positions[user_id] = new_position



# –ü–æ–∫–∞–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sorted_scores = sorted(user_scores.items(), key=lambda x: x[1]["correct"], reverse=True)
    leaderboard = "üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:*\n\n"

    for i, (user_id, score) in enumerate(sorted_scores, start=1):
        user_name = (await context.bot.get_chat(user_id)).first_name
        leaderboard += f"{i}. {user_name}: {score['correct']} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"

    await update.message.reply_text(leaderboard, parse_mode='Markdown', reply_markup=main_menu())


# –ü–æ–∫–∞–∑ –ª–∏—á–Ω–æ–≥–æ —Å—á—ë—Ç–∞
async def show_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    score = user_scores.get(user_id, {"correct": 0, "wrong": 0})
    await update.message.reply_text(
        f"üìä –¢–≤–æ–π —Å—á—ë—Ç:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {score['correct']}\n‚ùå –û—à–∏–±–æ–∫: {score['wrong']}",
        reply_markup=main_menu()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üß© –ó–∞–≥–∞–¥–∫–∞":
        await send_riddle(update, context)
    elif text == "üèÜ –†–µ–π—Ç–∏–Ω–≥":
        await show_leaderboard(update, context)
    elif text == "üìä –ú–æ–π —Å—á—ë—Ç":
        await show_score(update, context)
    else:
        await check_answer(update, context)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    TOKEN = '7973384839:AAHtI2UJrzNnRwWTJZo_-xCQdd1BcZkwLy4'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


    app.run_polling()


if __name__ == "__main__":
    main()

